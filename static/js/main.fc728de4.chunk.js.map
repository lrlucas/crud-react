{"version":3,"sources":["componentes/Header.js","componentes/navegacion/Navegacion.js","componentes/Post.js","componentes/Listado.js","componentes/Posts.js","componentes/SinglePost.js","componentes/Formulario.js","componentes/Editar.js","componentes/Router.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","Link","to","Navegacion","Post","confirmarEliminacion","id","_this","props","info","swal","title","text","type","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","cancelButtonText","then","result","value","borrarPost","_this$props$info","this","concat","onClick","React","Component","Listado","mostrarPost","posts","length","Fragment","Object","keys","map","post","componentes_Post","key","scope","Posts","state","componentes_Listado","SinglePost","_this$props$post","body","userId","Formulario","tituloRef","createRef","entradaRef","crearPost","e","preventDefault","current","onSubmit","ref","placeholder","Editar","editarPost","cargarFormulario","defaultValue","Router","obtenerPost","axios","get","data","setState","delete","status","resultado","toConsumableArray","filter","postId","nuevoPost","assign","console","log","prevState","postActualizado","put","postEditar","findIndex","_this2","BrowserRouter","componentes_Header","componentes_navegacion_Navegacion","Switch","Route","exact","path","render","componentes_Posts","filtro","idPost","location","pathname","replace","Number","componentes_SinglePost","componentes_Formulario","componentes_Editar","App","componentes_Router","Boolean","window","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uTAeeA,EAVA,WACX,OACIC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,mBACdH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAI,KACNL,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAd,iBCODG,SAXI,WAEf,OACIN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAI,KAAV,kBACAL,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAI,UAAV,kCC6CGE,6MAhDXC,qBAAuB,WAAM,IACjBC,EAAOC,EAAKC,MAAMC,KAAlBH,GACRI,IAAK,CACDC,MAAO,gBACPC,KAAM,oCACNC,KAAM,UACNC,kBAAkB,EAClBC,mBAAoB,UACpBC,kBAAmB,OACnBC,kBAAmB,cACnBC,iBAAkB,aACnBC,KAAK,SAACC,GACDA,EAAOC,QACPd,EAAKC,MAAMc,WAAWhB,GACtBI,IACI,aACA,6BACA,uFAQP,IAAAa,EACiBC,KAAKhB,MAAMC,KAAzBH,EADHiB,EACGjB,GAAIK,EADPY,EACOZ,MACZ,OACId,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,UAAMO,GACNT,EAAAC,EAAAC,cAAA,UAAMY,GACNd,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CACIC,GAAE,SAAAuB,OAAWnB,GAAMN,UAAU,mBADjC,OAIAH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CACIC,GAAE,WAAAuB,OAAanB,GAAMN,UAAU,mBADnC,UAIAH,EAAAC,EAAAC,cAAA,UAAQ2B,QAAUF,KAAKnB,qBAAuBL,UAAU,iBAAiBa,KAAK,UAA9E,mBA3CDc,IAAMC,WCwCVC,6MAtCXC,YAAc,WACZ,IAAMC,EAAQxB,EAAKC,MAAMuB,MACzB,OAAqB,IAAjBA,EAAMC,OAAqB,KAE3BnC,EAAAC,EAAAC,cAACF,EAAAC,EAAMmC,SAAP,KACMC,OAAOC,KAAKJ,GAAOK,IAAI,SAAAC,GAAI,OACzBxC,EAAAC,EAAAC,cAACuC,EAAD,CACIC,IAAKF,EACL5B,KAAMF,EAAKC,MAAMuB,MAAMM,GACvBf,WAAYf,EAAKC,MAAMc,yFAUrC,OAEIzB,EAAAC,EAAAC,cAAA,SAAOC,UAAU,SACbH,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,MAAIyC,MAAM,OAAV,MACA3C,EAAAC,EAAAC,cAAA,MAAIyC,MAAM,OAAV,UACA3C,EAAAC,EAAAC,cAAA,MAAIyC,MAAM,OAAV,cAGR3C,EAAAC,EAAAC,cAAA,aACEyB,KAAKM,uBA/BDF,aCiBPa,6MAjBXC,MAAQ,2EAGJ,OAEI7C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAd,SACAH,EAAAC,EAAAC,cAAC4C,EAAD,CACAZ,MAAOP,KAAKhB,MAAMuB,MAClBT,WAAYE,KAAKhB,MAAMc,qBAVnBM,aC0BLgB,6MAzBXd,YAAc,SAACtB,GACX,IAAKA,EAAM6B,KAAM,OAAO,KADH,IAAAQ,EAEWtC,EAAKC,MAAM6B,KAAnC1B,EAFakC,EAEblC,MAAOmC,EAFMD,EAENC,KAAMC,EAFAF,EAEAE,OACrB,OACIlD,EAAAC,EAAAC,cAACF,EAAAC,EAAMmC,SAAP,KACIpC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAeW,GAC7Bd,EAAAC,EAAAC,cAAA,mBAAWgD,GACXlD,EAAAC,EAAAC,cAAA,SAAI+C,6EAQZ,OAEIjD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACTwB,KAAKM,YAAYN,KAAKhB,eApBfoB,aC0CVoB,6MAvCXC,UAAYtB,IAAMuB,cAClBC,WAAaxB,IAAMuB,cAGnBE,UAAY,SAACC,GACTA,EAAEC,iBACF,IAAMjB,EAAO,CACT1B,MAAOJ,EAAK0C,UAAUM,QAAQlC,MAC9ByB,KAAMvC,EAAK4C,WAAWI,QAAQlC,MAC9B0B,OAAQ,GAIZxC,EAAKC,MAAM4C,UAAUf,4EAMrB,OACIxC,EAAAC,EAAAC,cAAA,QAAMyD,SAAUhC,KAAK4B,UAAWpD,UAAU,SACtCH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,eAAlB,oBAGAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,iCACAF,EAAAC,EAAAC,cAAA,SAAOc,KAAK,OAAO4C,IAAKjC,KAAKyB,UAAWjD,UAAU,eAAe0D,YAAY,qBAEjF7D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,YAAUC,UAAU,eAAeyD,IAAKjC,KAAK2B,WAAYO,YAAY,eAEzE7D,EAAAC,EAAAC,cAAA,UAAQc,KAAK,SAASb,UAAU,mBAAhC,wBAnCS2B,IAAMC,WC0DhB+B,6MAvDXV,UAAYtB,IAAMuB,cAClBC,WAAaxB,IAAMuB,cAGnBU,WAAa,SAACP,GACVA,EAAEC,iBACF,IAAMjB,EAAO,CACT1B,MAAOJ,EAAK0C,UAAUM,QAAQlC,MAC9ByB,KAAMvC,EAAK4C,WAAWI,QAAQlC,MAC9B0B,OAAQ,EACRzC,GAAIC,EAAKC,MAAM6B,KAAK/B,IAKxBC,EAAKC,MAAMoD,WAAWvB,MAI1BwB,iBAAmB,WACf,IAAKtD,EAAKC,MAAM6B,KAAM,OAAO,KADR,IAAAQ,EAECtC,EAAKC,MAAM6B,KAA1B1B,EAFckC,EAEdlC,MAAOmC,EAFOD,EAEPC,KACd,OACIjD,EAAAC,EAAAC,cAAA,QAAMyD,SAAUjD,EAAKqD,WAAY5D,UAAU,SACvCH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,eAAlB,kBAGAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,iCACAF,EAAAC,EAAAC,cAAA,SAAOc,KAAK,OAAO4C,IAAKlD,EAAK0C,UAAWjD,UAAU,eAAe8D,aAAcnD,KAEnFd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,YAAUC,UAAU,eAAeyD,IAAKlD,EAAK4C,WAAYW,aAAchB,KAE3EjD,EAAAC,EAAAC,cAAA,UAAQc,KAAK,SAASb,UAAU,mBAAhC,0FAUR,OACIH,EAAAC,EAAAC,cAACF,EAAAC,EAAMmC,SAAP,KACKT,KAAKqC,2BAlDDlC,IAAMC,WC8JZmC,6MAnJXrB,MAAQ,CACJX,MAAO,MAOXiC,YAAc,WACVC,IAAMC,IAAN,8CACK/C,KAAK,SAAAgD,GACF5D,EAAK6D,SAAS,CACVrC,MAAOoC,EAAKA,YAM5B7C,WAAa,SAAChB,GACV2D,IAAMI,OAAN,8CAAA5C,OAA2DnB,IACtDa,KAAK,SAAAgD,GACF,GAAIA,EAAKG,OAAQ,CACb,IACIC,EADMrC,OAAAsC,EAAA,EAAAtC,CAAO3B,EAAKmC,MAAMX,OACP0C,OAAO,SAAApC,GAAI,OAC5BA,EAAK/B,KAAOA,IAEhBC,EAAK6D,SAAS,CACVrC,MAAOwC,UAM3BnB,UAAY,SAACf,GACT4B,IAAM5B,KAAN,6CAAyD,CAACA,SACrDlB,KAAK,SAAAgD,GACF,GAAoB,MAAhBA,EAAKG,OAAgB,CACrB5D,IACI,eACA,yBACA,WAEJ,IAAIgE,EAAS,CAACpE,GAAI6D,EAAKA,KAAK7D,IACtBqE,EAAYzC,OAAO0C,OAAO,GAAIT,EAAKA,KAAK9B,KAAMqC,GACpDG,QAAQC,IAAIH,GACZpE,EAAK6D,SAAS,SAAAW,GAAS,MAAK,CACxBhD,MAAMG,OAAAsC,EAAA,EAAAtC,CAAK6C,EAAUhD,OAAhBN,OAAA,CAAuBkD,aAMhDf,WAAa,SAACoB,GAAoB,IACtB1E,EAAO0E,EAAP1E,GACR2D,IAAMgB,IAAN,8CAAAxD,OAAwDnB,GAAM,CAAC0E,oBAC1D7D,KAAM,SAAAgD,GACJ,GAAoB,MAAhBA,EAAKG,OAAgB,CACrB5D,IACI,mBACA,0BACA,WAEJ,IAAIgE,EAASP,EAAKA,KAAK7D,GACjByB,EAAKG,OAAAsC,EAAA,EAAAtC,CAAO3B,EAAKmC,MAAMX,OACvBmD,EAAanD,EAAMoD,UAAU,SAAA9C,GAAI,OAAIqC,IAAWrC,EAAK/B,KAC3DyB,EAAMmD,GAAcF,EACpBzE,EAAK6D,SAAS,CACVrC,iGA9DfP,KAAKwC,+CAoEA,IAAAoB,EAAA5D,KACL,OACI3B,EAAAC,EAAAC,cAACsF,EAAA,EAAD,KACIxF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BACXH,EAAAC,EAAAC,cAACuF,EAAD,MACAzF,EAAAC,EAAAC,cAACwF,EAAD,MACA1F,EAAAC,EAAAC,cAACyF,EAAA,EAAD,KACI3F,EAAAC,EAAAC,cAAC0F,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,OAAQ,WAC1B,OACI/F,EAAAC,EAAAC,cAAC8F,EAAD,CACI9D,MAAOqD,EAAK1C,MAAMX,MAClBT,WAAY8D,EAAK9D,gBAO7BzB,EAAAC,EAAAC,cAAC0F,EAAA,EAAD,CACIC,OAAK,EAACC,KAAK,gBAAgBC,OAAQ,SAACpF,GACpC,IAEIsF,EAFAC,EAASvF,EAAMwF,SAASC,SAASC,QAAQ,SAAU,IAMvD,OAHAJ,EAFcV,EAAK1C,MAAMX,MAEV0C,OAAO,SAAApC,GAAI,OACtBA,EAAK/B,KAAO6F,OAAOJ,KAGnBlG,EAAAC,EAAAC,cAACqG,EAAD,CACI/D,KAAMyD,EAAO,QAOzBjG,EAAAC,EAAAC,cAAC0F,EAAA,EAAD,CACIC,OAAK,EAACC,KAAK,SAASC,OAAQ,WAC5B,OACI/F,EAAAC,EAAAC,cAACsG,EAAD,CACIjD,UAAWgC,EAAKhC,eAQ5BvD,EAAAC,EAAAC,cAAC0F,EAAA,EAAD,CACIC,OAAK,EAACC,KAAK,kBAAkBC,OAAQ,SAACpF,GACtC,IAEIsF,EAFAC,EAASvF,EAAMwF,SAASC,SAASC,QAAQ,WAAY,IAMzD,OAHAJ,EAFcV,EAAK1C,MAAMX,MAEV0C,OAAO,SAAApC,GAAI,OACtBA,EAAK/B,KAAO6F,OAAOJ,KAGnBlG,EAAAC,EAAAC,cAACuG,EAAD,CACIjE,KAAMyD,EAAO,GACblC,WAAYwB,EAAKxB,2BArIpChC,aCAN2E,mLAPX,OAEE1G,EAAAC,EAAAC,cAACyG,EAAD,aAJY5E,aCQE6E,QACW,cAA7BC,OAAOV,SAASW,UAEe,UAA7BD,OAAOV,SAASW,UAEhBD,OAAOV,SAASW,SAASC,MACvB,2DCZNC,IAASjB,OAAO/F,EAAAC,EAAAC,cAAC+G,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhG,KAAK,SAAAiG,GACjCA,EAAaC","file":"static/js/main.fc728de4.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header className=\"col-12 col-md-8\">\r\n            <Link to={'/'}>\r\n                <h1 className=\"text-center\">React Blog</h1>\r\n            </Link>\r\n        </header>\r\n    )\r\n};\r\n\r\nexport default Header;\r\n\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './Navegacion.css'\r\n\r\n\r\nconst Navegacion = () => {\r\n\r\n    return (\r\n        <nav className=\"col-12 col-md-8\">\r\n            <Link to={'/'}>Todos los post</Link>\r\n            <Link to={'/crear'}>Nuevo post</Link>\r\n        </nav>\r\n    )\r\n\r\n};\r\n\r\nexport default Navegacion;\r\n","import React from 'react'\r\nimport {Link} from \"react-router-dom\";\r\nimport swal from 'sweetalert2';\r\n\r\nclass Post extends React.Component{\r\n\r\n\r\n    confirmarEliminacion = () => {\r\n        const { id } = this.props.info;\r\n        swal({\r\n            title: 'Estas seguro?',\r\n            text: \"No se puede deshacer esta accion!\",\r\n            type: 'warning',\r\n            showCancelButton: true,\r\n            confirmButtonColor: '#3085d6',\r\n            cancelButtonColor: '#d33',\r\n            confirmButtonText: 'Si, borrar!',\r\n            cancelButtonText: 'Cancelar'\r\n        }).then((result) => {\r\n            if (result.value) {\r\n                this.props.borrarPost(id)\r\n                swal(\r\n                    'Eliminado!',\r\n                    'El post ha sido eliminado.',\r\n                    'success'\r\n                )\r\n            }\r\n        })\r\n\r\n    };\r\n\r\n\r\n    render() {\r\n        const { id, title } = this.props.info;\r\n        return(\r\n            <tr>\r\n                <td>{ id }</td>\r\n                <td>{ title }</td>\r\n                <td>\r\n                    <Link\r\n                        to={`/post/${id}`} className=\"btn btn-primary\">\r\n                        Ver\r\n                    </Link>\r\n                    <Link\r\n                        to={`/editar/${id}`} className=\"btn btn-warning\">\r\n                        Editar\r\n                    </Link>\r\n                    <button onClick={ this.confirmarEliminacion } className=\"btn btn-danger\" type=\"button\">Borrar</button>\r\n                </td>\r\n            </tr>\r\n        )\r\n    }\r\n    \r\n}\r\n\r\nexport default Post","import React, { Component } from 'react';\r\nimport Post from \"./Post\";\r\n\r\n\r\n\r\nclass Listado extends Component{\r\n    mostrarPost = () =>{\r\n      const posts = this.props.posts;\r\n      if (posts.length === 0) return null;\r\n      return (\r\n          <React.Fragment>\r\n              { Object.keys(posts).map(post => (\r\n                  <Post\r\n                      key={post}\r\n                      info={this.props.posts[post]}\r\n                      borrarPost={this.props.borrarPost}\r\n                  />\r\n\r\n\r\n              ))}\r\n          </React.Fragment>\r\n      )\r\n    };\r\n\r\n    render() {\r\n        return(\r\n\r\n            <table className=\"table\">\r\n                <thead>\r\n                    <tr>\r\n                        <th scope=\"col\">ID</th>\r\n                        <th scope=\"col\">Titulo</th>\r\n                        <th scope=\"col\">Acciones</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                { this.mostrarPost() }\r\n                </tbody>\r\n            </table>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Listado;","import React, { Component } from 'react';\r\nimport Listado from \"./Listado\";\r\n\r\n\r\nclass Posts extends Component{\r\n    state = {};\r\n\r\n    render() {\r\n        return(\r\n\r\n            <div className=\"col-12 col-md-8\">\r\n                <h2 className=\"text-center\" >Posts</h2>\r\n                <Listado\r\n                posts={this.props.posts}\r\n                borrarPost={this.props.borrarPost}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Posts;","import React, { Component } from 'react';\r\n\r\n\r\nclass SinglePost extends Component{\r\n\r\n    mostrarPost = (props) => {\r\n        if (!props.post) return null;\r\n        const { title, body, userId } = this.props.post;\r\n        return (\r\n            <React.Fragment>\r\n                <h3 className=\"text-center\">{title}</h3>\r\n                <p>Autor: {userId}</p>\r\n                <p>{body}</p>\r\n            </React.Fragment>\r\n        )\r\n    };\r\n\r\n\r\n    render() {\r\n\r\n        return(\r\n\r\n            <div className=\"col-12 col-md-8\">\r\n                { this.mostrarPost(this.props) }\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default SinglePost;","import React from 'react';\r\n\r\n\r\nclass Formulario extends React.Component{\r\n\r\n    // crear los ref\r\n    tituloRef = React.createRef();\r\n    entradaRef = React.createRef();\r\n\r\n\r\n    crearPost = (e) => {\r\n        e.preventDefault();\r\n        const post = {\r\n            title: this.tituloRef.current.value,\r\n            body: this.entradaRef.current.value,\r\n            userId: 1\r\n        };\r\n\r\n        // enviar por props o peticion axios\r\n        this.props.crearPost(post)\r\n\r\n    };\r\n\r\n\r\n    render() {\r\n        return(\r\n            <form onSubmit={this.crearPost} className='col-8'>\r\n                <legend className=\"text-center\">\r\n                    Crear nuevo Post\r\n                </legend>\r\n                <div className=\"form-group\">\r\n                    <label>Titulo del post:</label>\r\n                    <input type=\"text\" ref={this.tituloRef} className=\"form-control\" placeholder=\"Titulo del post\"/>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label>Contenido:</label>\r\n                    <textarea className=\"form-control\" ref={this.entradaRef} placeholder=\"contenido\"></textarea>\r\n                </div>\r\n                <button type=\"submit\" className=\"btn btn-primary\">Guardar post</button>\r\n            </form>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Formulario;","import React from 'react';\r\n\r\n\r\nclass Editar extends React.Component{\r\n\r\n    // crear los ref\r\n    tituloRef = React.createRef()\r\n    entradaRef = React.createRef()\r\n\r\n\r\n    editarPost = (e) => {\r\n        e.preventDefault();\r\n        const post = {\r\n            title: this.tituloRef.current.value,\r\n            body: this.entradaRef.current.value,\r\n            userId: 1,\r\n            id: this.props.post.id\r\n        };\r\n        // console.log(post)\r\n\r\n        // enviar por props o peticion axios\r\n        this.props.editarPost(post)\r\n\r\n    };\r\n\r\n    cargarFormulario = () => {\r\n        if (!this.props.post) return null;\r\n        const {title, body} = this.props.post;\r\n        return(\r\n            <form onSubmit={this.editarPost} className='col-8'>\r\n                <legend className=\"text-center\">\r\n                Editar el Post\r\n                </legend>\r\n                <div className=\"form-group\">\r\n                    <label>Titulo del post:</label>\r\n                    <input type=\"text\" ref={this.tituloRef} className=\"form-control\" defaultValue={title}/>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label>Contenido:</label>\r\n                    <textarea className=\"form-control\" ref={this.entradaRef} defaultValue={body}></textarea>\r\n                </div>\r\n                <button type=\"submit\" className=\"btn btn-primary\">Guardar post</button>\r\n            </form>\r\n        )\r\n    };\r\n\r\n\r\n    render() {\r\n\r\n\r\n\r\n        return(\r\n            <React.Fragment>\r\n                {this.cargarFormulario()}\r\n            </React.Fragment>\r\n\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Editar;","import React, {Component} from \"react\";\r\nimport {BrowserRouter, Route, Switch} from \"react-router-dom\";\r\nimport axios from \"axios\";\r\n\r\nimport Header from \"./Header\";\r\nimport Navegacion from \"./navegacion/Navegacion\";\r\nimport Posts from \"./Posts\";\r\nimport SinglePost from \"./SinglePost\";\r\nimport Formulario from './Formulario';\r\nimport swal from 'sweetalert2'\r\nimport Editar from \"./Editar\";\r\n\r\n\r\nclass Router extends Component {\r\n    state = {\r\n        posts: []\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.obtenerPost();\r\n    }\r\n\r\n    obtenerPost = () => {\r\n        axios.get(`https://jsonplaceholder.typicode.com/posts`)\r\n            .then(data => {\r\n                this.setState({\r\n                    posts: data.data\r\n                })\r\n            })\r\n    };\r\n\r\n\r\n    borrarPost = (id) => {\r\n        axios.delete(`https://jsonplaceholder.typicode.com/posts/${id}`)\r\n            .then(data => {\r\n                if (data.status) {\r\n                    const post = [...this.state.posts];\r\n                    let resultado = post.filter(post => (\r\n                        post.id !== id\r\n                    ));\r\n                    this.setState({\r\n                        posts: resultado\r\n                    });\r\n                }\r\n            })\r\n    };\r\n\r\n    crearPost = (post) => {\r\n        axios.post(`https://jsonplaceholder.typicode.com/posts`, {post})\r\n            .then(data => {\r\n                if (data.status === 201) {\r\n                    swal(\r\n                        'Post creado!',\r\n                        'Se creo correctamente!',\r\n                        'success'\r\n                    );\r\n                    let postId = {id: data.data.id}\r\n                    const nuevoPost = Object.assign({}, data.data.post, postId)\r\n                    console.log(nuevoPost)\r\n                    this.setState(prevState => ({\r\n                        posts: [...prevState.posts, nuevoPost]\r\n                    }))\r\n                }\r\n            })\r\n    };\r\n\r\n    editarPost = (postActualizado) => {\r\n        const { id } = postActualizado;\r\n        axios.put(`https://jsonplaceholder.typicode.com/posts/${id}`, {postActualizado})\r\n            .then( data => {\r\n               if (data.status === 200) {\r\n                   swal(\r\n                       'Post actualizado',\r\n                       'Se guardo correctamente',\r\n                       'success'\r\n                   );\r\n                   let postId = data.data.id;\r\n                   const posts = [...this.state.posts];\r\n                   const postEditar = posts.findIndex(post => postId === post.id)\r\n                   posts[postEditar] = postActualizado;\r\n                   this.setState({\r\n                       posts\r\n                   })\r\n               }\r\n            });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <BrowserRouter>\r\n                <div className=\"container\">\r\n                    <div className=\"row justify-content-center\">\r\n                        <Header/>\r\n                        <Navegacion/>\r\n                        <Switch>\r\n                            <Route exact path=\"/\" render={() => {\r\n                                return (\r\n                                    <Posts\r\n                                        posts={this.state.posts}\r\n                                        borrarPost={this.borrarPost}\r\n                                    >\r\n\r\n                                    </Posts>\r\n                                )\r\n                            }}/>\r\n\r\n                            <Route\r\n                                exact path=\"/post/:postId\" render={(props) => {\r\n                                let idPost = props.location.pathname.replace('/post/', '');\r\n                                const posts = this.state.posts;\r\n                                let filtro;\r\n                                filtro = posts.filter(post => (\r\n                                    post.id === Number(idPost)\r\n                                ));\r\n                                return (\r\n                                    <SinglePost\r\n                                        post={filtro[0]}\r\n                                    />\r\n                                )\r\n                            }}\r\n\r\n                            />\r\n\r\n                            <Route\r\n                                exact path='/crear' render={() => {\r\n                                return (\r\n                                    <Formulario\r\n                                        crearPost={this.crearPost}\r\n\r\n                                    />\r\n                                )\r\n                            }}\r\n                            />\r\n\r\n\r\n                            <Route\r\n                                exact path=\"/editar/:postId\" render={(props) => {\r\n                                let idPost = props.location.pathname.replace('/editar/', '');\r\n                                const posts = this.state.posts;\r\n                                let filtro;\r\n                                filtro = posts.filter(post => (\r\n                                    post.id === Number(idPost)\r\n                                ));\r\n                                return (\r\n                                    <Editar\r\n                                        post={filtro[0]}\r\n                                        editarPost={this.editarPost}\r\n                                    />\r\n                                )\r\n                            }}\r\n\r\n                            />\r\n\r\n                        </Switch>\r\n                    </div>\r\n                </div>\r\n            </BrowserRouter>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Router;\r\n","import React, { Component } from 'react';\nimport Router from './componentes/Router'\n\n\nclass App extends Component {\n  render() {\n    return (\n\n      <Router></Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}